#!/usr/bin/env python
"""Return the first available APT proxy server, or DIRECT if not found."""

# This is free software: you can redistribute it and/or modify it under the 
# terms of the GNU General Public License as published by the Free Software 
# Foundation, version 2.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# For a copy of the GNU General Public License, version 2, see:
# http://www.gnu.org/licenses/gpl-2.0.html

# TODO:
# Validate conf file line syntax

from __future__ import print_function
from __future__ import with_statement
import os
import sys
import socket
from optparse import OptionParser

__author__ = "tyler@tolaris.com"
__version__ = "1.0.0"
prog = os.path.basename(sys.argv[0])
name = prog

# globals
conf_file = os.path.join('/etc/apt/', "{0}.conf".format(name))
timeout = 2

if __name__ == "__main__":
    # optparse
    usage = "%prog [options] [URL] [...]"
    version = "%prog " + __version__ + ", by " + __author__
    epilog = "One or more URLs may be specified on the command line. If missing, {0} will search the list in {1}.".format(name, conf_file)
    parser = OptionParser(usage=usage, version=version, description=__doc__, epilog=epilog)
    parser.add_option("-c", "--conffile", action="store", help="specify file of URLs to try")
    (options, args) = parser.parse_args()
    if options.conffile:
        conf_file = options.conffile

    if args:
        lines = args
    else:
        try:
            with open(conf_file) as fh:
                lines = fh.readlines()
        except IOError as e:
            print(e)
            sys.exit()

    for line in lines:
        line = line.strip()
        if line[0] == '#':
            continue
        proto, host, port = line.split(':')
        host = host.lstrip('/')
        port = int(port)
        # automatically close socket when leaving block
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(timeout)
        try:
            # if connect is good, print and exit
            if s.connect_ex((host, port)) == 0:
                print(line)
                s.close()
                break
        except:
            s.close()
            continue
    else:
        print("DIRECT")
